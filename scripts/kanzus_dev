#!/local/data/idsbc/idstaff/gladier/miniconda3/envs/gladier/bin/python

import pathlib
import time, argparse, os, re
import numpy as np
from watchdog.observers import Observer
#from watchdog.observers.polling import PollingObserver as Observer
from watchdog.events import FileSystemEventHandler

class KanzusTriggers:
    def __init__(self, folder_path):
        self.observer = Observer()
        self.folder_path = folder_path

    def run(self,pattern=None):
        print("Kanzus Triggers Started")
        if not os.path.isdir(self.folder_path):
            print("Monitor dir does not exist.")
            print("Dir " + self.folder_path + " was created")
            os.mkdir(self.folder_path)
            
        print("Monitoring: " + self.folder_path)
        print('')

        event_handler = Handler()
        self.observer.schedule(event_handler, self.folder_path, recursive = True)
        
        self.observer.start()
        
        try:
            while True:
                time.sleep(1)
        except:
            self.observer.stop()
            print("Kanzus Triggers Stopped")

        self.observer.join()

#https://stackoverflow.com/questions/58484940/process-multiple-oncreated-events-parallelly-in-python-watchdog
class Handler(FileSystemEventHandler):
    @staticmethod
    def on_any_event(event):
#        print(event)
        if event.is_directory:
            return None
        elif event.event_type == 'created':
            KanzusLogic(event.src_path)
            return None
        elif event.event_type == 'modified':
            KanzusLogic(event.src_path)
            return None

def parse_cbf_event(event_file):
#    cbf_num_pattern = r'(\w+_\d+_)(\d+).cbf' ##old pattern
#    cbf_num_pattern = r'(\w+)\/(\w+)\/(\w+)\/(\w+)_(\d+)_(\d+).cbf'
#    cbf_parse = re.match(cbf_num_pattern, event_file)
#    print(cbf_parse)
#    exp = cbf_parse.group(1)
#   sample = cbf_parse.group(2)
#    chip_letter = cbf_parse.group(3)
#    chip_name = cbf_parse.group(4)
#    run_num = int(cbf_parse.group(5)) 
#    cbf_num = int(cbf_parse.group(6))
    event = {}
    event['exp'] = event_file.split('/')[-4]
    event['sample'] = event_file.split('/')[-3]
    event['chip_letter'] = event_file.split('/')[-2]
    event['filename'] = event_file.split('/')[-1]
    event['chip_name'] = event['filename'].split('_')[0]
    event['run_num'] = int(event['filename'].split('_')[1])
    try:
        event['cbf_num'] = int(event['filename'].split('_')[2].replace('.cbf',''))
    except:
        event['cbf_num'] = None
    return event

def parse_int_event(event_file):
    pass

def KanzusLogic(event_file):
    print(event_file)

    if '.cbf' in event_file:
        event = parse_cbf_event(event_file)
        exp_path = base_input["input"]["base_local_dir"]
        print(event)
        # LOCAL processing dirs
        #local_dir = os.path.join(exp_path, sample, chip_letter)
        #base_input["input"]["local_dir"] = local_dir
        #base_input["input"]["local_proc_dir"] = local_dir + '_proc'
        #base_input["input"]["local_upload_dir"] = os.path.join(exp_path, sample, chip_name) + '_images'

        # REMOTE processing dirs
        #data_dir = os.path.join(base_input["input"]["base_data_dir"], sample, chip_letter)
        #base_input["input"]["data_dir"] = data_dir
        #base_input["input"]["proc_dir"] = data_dir + '_proc'
        #base_input["input"]["upload_dir"] = os.path.join(base_input["input"]["base_data_dir"], sample, chip_name) + '_images' 
        #base_input["input"]["trigger_name"] = event_file



# Arg Parsing
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('localdir', type=str, default='.')
    parser.add_argument('--datadir', type=str, 
        default='/APSDataAnalysis/SSX/random_start')
    parser.add_argument('--deployment','-d', default='raf-prod', help=f'Deployment configs. Available: {list(deployment_map.keys())}')
    return parser.parse_args()

from gladier_kanzus.deployments import deployment_map



if __name__ == '__main__':

    args = parse_args()

    local_dir = args.localdir
    data_dir = args.datadir
    
    depl = deployment_map.get(args.deployment)
    if not depl:
        raise ValueError(f'Invalid Deployment, deployments available: {list(deployment_map.keys())}')

    depl_input = depl.get_input()


    base_input = {
        "input": {
            #Processing variables
            "base_local_dir": local_dir,
            "base_data_dir": data_dir,

            "nproc": 32,
            "beamx": "-214.400",
            "beamy": "218.200",

            # funcX endpoints
            # Should think of moving those to a cfg with better naming
            'funcx_endpoint_non_compute': depl_input['input']['funcx_endpoint_non_compute'],
            'funcx_endpoint_compute': depl_input['input']['funcx_endpoint_compute'],

            # globus endpoints
            "globus_local_ep": depl_input['input']['beamline_globus_ep'],
            # "globus_dest_ep": depl_input['input']['eagle_globus_ep'], 
	        "globus_dest_ep": depl_input['input']['theta_globus_ep'],
    
            # container hack for stills
#            "stills_process_funcx_id": register_container(),
        }
    }


    os.chdir(local_dir)

    exp = KanzusTriggers(local_dir)
    exp.run()



